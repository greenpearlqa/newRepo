from asyncio.log import logger
from Utilities.paths import get_groupsession_upload_file_path, get_image_file_path, get_pdf_file_path
import logging
class Async_qasite:

    def __init__(self, page):

        self.page = page
        self.search_button = page.locator("#btnSearchByPend")
        self.QA_button = page.locator('[title="Click on this link to edit student details."]')
        self.qa_parameter_uploadfile = page.locator("#fileUpload_SMEC")
        self.comm_style_uploadfile = page.locator("#fileUpload_CCS")
        self.english_lang_uploadfile= page.locator("#fileUpload_CEL")
        self.instructiona_methodo_uploadfile = page.locator("#fileUpload_CIM")
        self.pacing_fileupload = page.locator("#fileUpload_CP")
        self.process_fileupload= page.locator("#fileUpload_CPR")
        self.Overall_Tutoring_Quality = page.get_by_role("row", name="Overall Tutoring Quality * Reset").locator("#rid_2")
        self.Student_Rapport = page.get_by_role("row", name="Student Rapport * Reset").locator("#rid_3")
        self.Student_Mastery = page.get_by_role("row", name="Student Mastery * Reset").locator("#rid_3")
        self.PTI_fileupload =page.locator("#fileUpload_PTI")
        self.Summary_uploadfile= page.locator("#fileUpload_SUM")
        self.action_plan = page.locator("#fileUpload_AP")
        self.action_plan_file_upload = page.locator("#fileUpload_AP")
        self.qa_flag = page.locator("#ddlFlagQA")
        self.any_specific_concern = page.locator("#fileUpload_SC")
        self.any_specific_concern_upload_file = page.locator("#fileUpload_SC")
        self.first_question_start_time = page.get_by_role("row", name="First Question start time (As per QA) *").get_by_role("textbox")
        self.fill_start_time = page.locator("//input[@class='fancy-select form-control 10 req']")
        self.qa_comment = page.locator("#fileUpload_FQST")
        self.qa_comment_upload_file = page.locator("#fileUpload_FQST")
        self.student_feedback = page.locator("#fileUpload_SF")
        self.student_feedback_upload_file = page.locator("#fileUpload_SF")
        self.average_tutor_response_time = page.locator("#fileUpload_ATRS")
        self.average_tutor_response_time_upload_file = page.locator("#fileUpload_ATRS")
        self.exit_ticket_score = page.locator("#fileUpload_ETS")
        self.exit_ticket_score_upload_file = page.locator("#fileUpload_ETS")
        self.requirement = page.locator("#fileUpload_REQ")
        self.requirement_upload_file = page.locator("#fileUpload_REQ")
        self.specific_concern2 = page.locator("#fileUpload_SC2")
        self.specific_concern2_upload_file = page.locator("#fileUpload_SC2")
        self.specific_concern3 = page.locator("#fileUpload_SC3")
        self.specific_concern3_upload_file = page.locator("#fileUpload_SC3")
        self.technical_issue = page.locator("#fileUpload_TI")
        self.technical_issue_upload_file = page.locator("#fileUpload_TI")
        self.lesson_start_procedure = page.locator("#fileUpload_LSP")
        self.lesson_start_procedure_upload_file = page.locator("#fileUpload_LSP")
        self.submit = page.get_by_role("button", name="Submit")
        self.ok = page.get_by_text("Ok")
        self.page.once("dialog", lambda dialog: dialog.accept())
        self.logout = page.get_by_role("link", name="ï€‘ Logout")
        self.SME = page.locator("(//div[@role='textbox'])[1]")
        self.CS = page.locator("(//div[@role='textbox'])[2]")
        self.English = page.locator("(//div[@role='textbox'])[3]")
        self.InstructionalMethodology = page.locator("(//div[@role='textbox'])[4]")
        self.Pacing = page.locator("(//div[@role='textbox'])[5]")
        self.Process = page.locator("(//div[@role='textbox'])[6]")
        self.OverallSummary = page.locator("(//div[@role='textbox'])[7]")
        self.Summary = page.locator("(//div[@role='textbox'])[8]")
        self.ActionPlan = page.locator("(//div[@role='textbox'])[9]")
        self.SpecificConcern = page.locator("(//div[@role='textbox'])[10]")
        self.FQST = page.locator("(//div[@role='textbox'])[11]")
        self.StudentFeedback = page.locator("(//div[@role='textbox'])[12]")
        self.ResponseTime = page.locator("(//div[@role='textbox'])[13]")
        self.ExitTicketScore = page.locator("(//div[@role='textbox'])[14]")
        self.Requirement = page.locator("(//div[@role='textbox'])[15]")
        self.SpecificConcern2 = page.locator("(//div[@role='textbox'])[16]")
        self.SpecificConcern3 = page.locator("(//div[@role='textbox'])[17]")
        self.TechnicalIssue = page.locator("(//div[@role='textbox'])[18]")
        self.LessonStartProcedure = page.locator("(//div[@role='textbox'])[19]")

    async def qa_form(self):

            await self.search_button.click(timeout=0)
            await self.QA_button.first.click()
            await self.page.wait_for_timeout(4000)
            await self.page.evaluate('window.scrollTo(0, document.body.scrollHeight)')
            await self.qa_parameter_uploadfile.set_input_files(get_image_file_path())
            await self.page.wait_for_timeout(3000)
            await self.SME.fill("Testing")
            await self.comm_style_uploadfile.set_input_files(get_pdf_file_path())
            await self.page.wait_for_timeout(4000)
            await self.CS.fill("Testing")
            await self.english_lang_uploadfile.set_input_files(get_image_file_path())
            await self.page.wait_for_timeout(3000)
            await self.English.fill("Testing")
            await self.page.wait_for_timeout(4000)
            #self.page.evaluate('window.scrollTo(0, document.body.scrollHeight)')
            
            await self.page.evaluate('window.scrollTo(0, 1000)')
            await self.instructiona_methodo_uploadfile.set_input_files(get_image_file_path())
        #     await self.InstructionalMethodology.fill("Testing")
            await self.page.wait_for_timeout(3000)
            await self.page.evaluate('window.scrollTo(0, 2000)')
            #self.page.evaluate('window.scrollTo(0, document.body.scrollHeight)')
            await self.pacing_fileupload.set_input_files(get_pdf_file_path())
            await self.page.wait_for_timeout(4000)
        #     await self.Pacing.fill("Testing")
            await self.page.wait_for_timeout(4000)
            await self.page.evaluate('window.scrollTo(0, 4000)')
            await self.process_fileupload.set_input_files(get_image_file_path())
            await self.page.wait_for_timeout(3000)
        #     await self.Process.fill("Testing")
            await self.page.wait_for_timeout(3000)
            await self.page.evaluate('window.scrollTo(0, 60000)')
            await self.Overall_Tutoring_Quality.check()
            await self.Student_Rapport.check()
            await self.Student_Mastery.check()
            await self.PTI_fileupload.set_input_files(get_image_file_path())
            await self.page.wait_for_timeout(4000)
            #await self.OverallSummary.fill("Testing")
            await self.page.wait_for_timeout(4000)
            await self.page.evaluate('window.scrollTo(0, 80000)')
            await self.Summary_uploadfile.set_input_files(get_image_file_path())
            await self.page.wait_for_timeout(3000)
            await self.page.evaluate('window.scrollTo(0, 100000)')
            await self.page.wait_for_timeout(4000)
            await self.qa_parameter_uploadfile.set_input_files(get_image_file_path())
            await self.page.wait_for_timeout(2000)
            await self.action_plan_file_upload.set_input_files(get_image_file_path())
            await self.page.wait_for_timeout(2000)
            await self.qa_flag.select_option("1")
          # await self.ActionPlan.fill("Testing")
            await self.any_specific_concern_upload_file.set_input_files(get_groupsession_upload_file_path())
            #await self.SpecificConcern.fill("Testing")
            await self.first_question_start_time.click()
            await self.page.wait_for_timeout(2000)
            await self.fill_start_time.fill("10")
            await self.page.wait_for_timeout(2000)
            await self.FQST.fill("Testing")
            await self.qa_comment_upload_file.set_input_files(get_groupsession_upload_file_path())
          # await self.FQST.fill("Testing")
            await self.page.wait_for_timeout(2000)
            await self.student_feedback_upload_file.set_input_files(get_groupsession_upload_file_path())
          # await self.StudentFeedback.fill("Testing")
            await self.page.wait_for_timeout(2000)
            await self.average_tutor_response_time_upload_file.set_input_files(get_groupsession_upload_file_path())
          # await self.ResponseTime.fill("Testing")
            await self.page.wait_for_timeout(2000)
            await self.exit_ticket_score_upload_file.set_input_files(get_groupsession_upload_file_path())
            await self.page.wait_for_timeout(3000)
          # await self.ExitTicketScore.fill("Testing") 
            await self.page.wait_for_timeout(2000)
            await self.requirement_upload_file.set_input_files(get_groupsession_upload_file_path())
            await self.page.wait_for_timeout(3000)
          # await self.Requirement.fill("Testing")
            await self.page.wait_for_timeout(2000)
            await self.specific_concern2_upload_file.set_input_files(get_groupsession_upload_file_path())
            await self.page.wait_for_timeout(3000)
          # await self.SpecificConcern2.fill("Testing")
            await self.page.wait_for_timeout(2000)
            await self.specific_concern3_upload_file.set_input_files(get_groupsession_upload_file_path())
            await self.page.wait_for_timeout(3000)
          # await self.SpecificConcern3.fill("Testing")
            await self.page.wait_for_timeout(2000)
            await self.technical_issue_upload_file.set_input_files(get_groupsession_upload_file_path())
            await self.page.wait_for_timeout(3000)
            #await self.TechnicalIssue.fill("Testing")
            await self.lesson_start_procedure_upload_file.set_input_files(get_groupsession_upload_file_path())
            await self.page.wait_for_timeout(2000)
          # await self.LessonStartProcedure.fill("Testing")
            await self.page.wait_for_timeout(2000)
            await self.lesson_start_procedure_upload_file.set_input_files(get_groupsession_upload_file_path())
            await self.page.wait_for_timeout(2000)
            await self.submit.click()
            await self.page.wait_for_timeout(2000)
            await self.ok.click()
            await self.page.wait_for_timeout(2000)
            await self.logout.click()