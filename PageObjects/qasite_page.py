from Utilities.paths import get_image_file_path, get_pdf_file_path

class Qasite:

    def __init__(self, page):
        self.page = page
        self.search_button = page.locator("#btnSearchByPend")
        self.QA_button = page.locator('(//a[@class="btn btn-primary setSession1"])[2]')
        self.qa_parameter_uploadfile = page.locator("#fileUpload_SMEC")
        self.comm_style_uploadfile = page.locator("#fileUpload_CCS")
        self.english_lang_uploadfile= page.locator("#fileUpload_CEL")
        self.instructiona_methodo_uploadfile = page.locator("#fileUpload_CIM")
        self.pacing_fileupload = page.locator("#fileUpload_CP")
        self.process_fileupload= page.locator("#fileUpload_CPR")
        self.Overall_Tutoring_Quality = page.get_by_role("row", name="Overall Tutoring Quality * Reset").locator("#rid_2")
        self.Student_Rapport = page.get_by_role("row", name="Student Rapport * Reset").locator("#rid_3")
        self.Student_Mastery = page.get_by_role("row", name="Student Mastery * Reset").locator("#rid_3")
        self.PTI_fileupload =page.locator("#fileUpload_PTI")
        self.Summary_uploadfile= page.locator("#fileUpload_SUM")
        self.action_plan = page.locator("#fileUpload_AP")
        self.action_plan_file_upload = page.locator("#fileUpload_AP")
        self.qa_flag = page.locator("#ddlFlagQA")
        self.any_specific_concern = page.locator("#fileUpload_SC")
        self.any_specific_concern_upload_file = page.locator("#fileUpload_SC")
        #self.first_question_start_time = page.get_by_role("row", name="First Question start time (As per QA) *").get_by_role("textbox")
        self.fill_start_time = page.get_by_role("row", name="First Question start time (As per QA) *").get_by_role("textbox")
       # self.fill_start_time = page.locator('//input[@class="fancy-select form-control 10 req"]')
        self.qa_comment = page.locator("#fileUpload_FQST")
        self.qa_comment_upload_file = page.locator("#fileUpload_FQST")
        self.student_feedback = page.locator("#fileUpload_SF")
        self.student_feedback_upload_file = page.locator("#fileUpload_SF")
        self.average_tutor_response_time = page.locator("#fileUpload_ATRS")
        self.average_tutor_response_time_upload_file = page.locator("#fileUpload_ATRS")
        self.exit_ticket_score = page.locator("#fileUpload_ETS")
        self.exit_ticket_score_upload_file = page.locator("#fileUpload_ETS")
        self.requirement = page.locator("#fileUpload_REQ")
        self.requirement_upload_file = page.locator("#fileUpload_REQ")
        self.specific_concern2 = page.locator("#fileUpload_SC2")
        self.specific_concern2_upload_file = page.locator("#fileUpload_SC2")
        self.specific_concern3 = page.locator("#fileUpload_SC3")
        self.specific_concern3_upload_file = page.locator("#fileUpload_SC3")
        self.technical_issue = page.locator("#fileUpload_TI")
        self.technical_issue_upload_file = page.locator("#fileUpload_TI")
        self.lesson_start_procedure = page.locator("#fileUpload_LSP")
        self.lesson_start_procedure_upload_file = page.locator("#fileUpload_LSP")
        self.submit = page.get_by_role("button", name="Submit")
        self.ok = page.get_by_text("Ok")
        self.page.once("dialog", lambda dialog: dialog.accept())
        self.logout = page.get_by_role("link", name="ï€‘ Logout")
        self.SME = page.locator("[id=\"_1\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.CS = page.locator("[id=\"_2\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.English = page.locator("[id=\"_3\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.InstructionalMethodology = page.locator("[id=\"_4\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.Pacing = page.locator("[id=\"_5\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.Process = page.locator("[id=\"_6\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.OverallSummary = page.locator("[id=\"_7\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.Summary = page.locator("[id=\"_8\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.ActionPlan = page.locator("[id=\"_9\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.SpecificConcern = page.locator("[id=\"_10\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.FQST = page.locator("[id=\"_11\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.StudentFeedback = page.locator("[id=\"_12\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.ResponseTime = page.locator("[id=\"_13\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.ExitTicketScore = page.locator("[id=\"_14\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.Requirement = page.locator("[id=\"_15\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.SpecificConcern2 = page.locator("[id=\"_16\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.SpecificConcern3 = page.locator("[id=\"_17\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.TechnicalIssue = page.locator("[id=\"_18\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
        self.LessonStartProcedure = page.locator("[id=\"_19\"] span").filter(has_text="16 8 9 10 11 12 14 18 24 36 Background ColorTransparentSelectText ColorReset to ").get_by_role("textbox")
   
    def qa_form(self):
        self.search_button.click(timeout=0)
        self.QA_button.click(timeout=0)
        self.page.evaluate('window.scrollTo(0, document.body.scrollHeight)')
        self.qa_parameter_uploadfile.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.SME.fill("Testing")
        self.comm_style_uploadfile.set_input_files(get_pdf_file_path())
        self.page.wait_for_timeout(3000)
        self.CS.fill("Testing")
        self.english_lang_uploadfile.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.English.fill("Testing")
        self.instructiona_methodo_uploadfile.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.InstructionalMethodology.fill("Testing")
        self.pacing_fileupload.set_input_files(get_pdf_file_path())
        self.page.wait_for_timeout(3000)
        self.Pacing.fill("Testing")
        self.process_fileupload.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.Process.fill("Testing")
        self.Overall_Tutoring_Quality.check()
        self.Student_Rapport.check()
        self.Student_Mastery.check()
        self.PTI_fileupload.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.OverallSummary.fill("Testing")
        self.Summary_uploadfile.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.Summary.fill("Testing")
        self.action_plan_file_upload.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(30000)
        self.ActionPlan.fill("Testing")
        self.qa_flag.select_option("1")
        self.any_specific_concern_upload_file.set_input_files(get_image_file_path())
        self.SpecificConcern.fill("Testing")
        #self.first_question_start_time.click()
        #self.fill_start_time.click()
        self.fill_start_time.fill("10")
        
        self.qa_comment_upload_file.set_input_files(get_image_file_path())
        #self.page.wait_for_timeout(2000)
        self.FQST.fill("Testing")
        self.student_feedback_upload_file.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.StudentFeedback.fill("Testing")
        self.average_tutor_response_time_upload_file.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.ResponseTime.fill("Testing")
        self.exit_ticket_score_upload_file.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.ExitTicketScore.fill("Testing")
        self.requirement_upload_file.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.Requirement.fill("Testing")
        self.specific_concern2_upload_file.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.SpecificConcern2.fill("Testing")
        self.specific_concern3_upload_file.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.SpecificConcern3.fill("Testing")
        self.technical_issue_upload_file.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(3000)
        self.TechnicalIssue.fill("Testing")
        self.lesson_start_procedure_upload_file.set_input_files(get_image_file_path())
        self.page.wait_for_timeout(2000)
        self.LessonStartProcedure.fill("Testing")
        self.submit.click()
        self.page.wait_for_timeout(200)
        self.ok.click()
        self.logout.click()
